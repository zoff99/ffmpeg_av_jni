# syntax=docker/dockerfile:1
FROM ubuntu:20.04
RUN echo x
RUN export DEBIAN_FRONTEND=noninteractive ; apt update && apt install -y make    yasm curl   wget    git    coreutils    autoconf    libtool    pkg-config    libsodium-dev     nano    vim
RUN mkdir -p /workspace2/build/
RUN cd /workspace2/build/;FFMPEG_VERSION=n6.1 ; FFMPEG_FILENAME="$FFMPEG_VERSION.tar.gz" ;rm -f "ffmpeg"*.tar.*;wget "https://github.com/FFmpeg/FFmpeg/archive/refs/tags/$FFMPEG_FILENAME" -O "ffmpeg_""$FFMPEG_FILENAME";tar -xf "ffmpeg_""$FFMPEG_FILENAME";rm -f "ffmpeg"*.tar.*
RUN export DEBIAN_FRONTEND=noninteractive ; apt install -y yasm \
          openjdk-17-jdk \
          openjdk-17-jdk-headless \
          coreutils autoconf libtool pkg-config \
          gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64 binutils-mingw-w64-x86-64 \
          mingw-w64-tools pkg-config-mingw-w64-x86-64 win-iconv-mingw-w64-dev \
          mingw-w64-x86-64-dev

RUN export DEBIAN_FRONTEND=noninteractive ; apt install -y cmake

RUN ls -al /workspace2/build/
RUN ls -al /usr/x86_64-w64-mingw32/include
RUN ls -al /usr/x86_64-w64-mingw32/lib/libdsound.a

RUN mkdir /workspace2/build/openal_bin/
RUN echo 2
RUN cd /workspace2/build/openal_bin/ ; git clone https://github.com/zoff99/openal_mingw
RUN ls -al /workspace2/build/openal_bin/openal_mingw/

RUN cd /workspace2/build/ && mkdir -p /workspace2/build/inst/ && \
    cd ./FFmpeg-n6.1/ && \
    ARCH="x86_64" && \
    export ARCH && \
    sed -i -e 's#-lopenal#-lOpenAL32#' configure ; \
    sed -i -e 's#check_lib openal#echo #' configure ; \
    sed -i -e 's#die "ERROR: openal must#echo "#' configure ; \
    sed -i -e 's#enabled openal#enabled opexaynal #' configure ; \
    echo ${OPENAL_LIBS} ; \
    cat configure|grep -i openal ; \
    ./configure  \
              --arch="$ARCH" \
              --enable-gpl \
              --prefix="/workspace2/build/inst/" \
              --target-os="mingw32" \
              --cross-prefix="$ARCH-w64-mingw32-" \
              --pkg-config="pkg-config" \
              --extra-cflags="-DAL_LIBTYPE_STATIC -static -I/workspace2/build/openal_bin/openal_mingw/ -O2 -g0 -D_FORTIFY_SOURCE=2 -fstack-protector-strong" \
              --extra-ldflags="-DAL_LIBTYPE_STATIC -L/workspace2/build/openal_bin/openal_mingw/router/ /workspace2/build/openal_bin/openal_mingw/router/OpenAL32.lib -lm -L/workspace2/build/inst/lib/ -static -fstack-protector-strong" \
              --pkg-config-flags="--static" \
              --disable-network \
              --disable-debug \
              --disable-shared \
              --disable-protocols \
              --disable-doc \
              --disable-sdl2 \
              --disable-filters \
              --disable-iconv \
              --disable-network \
              --disable-muxers \
              --disable-postproc \
              --disable-swscale-alpha \
              --disable-dwt \
              --disable-lsp \
              --disable-faan \
              --disable-vaapi \
              --disable-vdpau \
              --disable-zlib \
              --disable-xlib \
              --disable-bzlib \
              --disable-lzma \
              --disable-encoders \
              --disable-decoders \
              --disable-demuxers \
              --disable-parsers \
              --disable-bsfs \
              --enable-swscale \
              --disable-ffmpeg \
              --disable-ffprobe \
              --enable-swresample \
              --enable-openal \
              --enable-indev=openal \
              --enable-indev=dshow \
              --enable-indev=gdigrab \
              --enable-indev=vfwcap \
              --enable-decoder=mjpeg \
              --enable-decoder=bmp \
              --enable-demuxer=rawvideo \
              --enable-decoder=rawvideo \
              --enable-demuxer=pcm_s16le \
              --enable-decoder=pcm_s16le \
              --enable-filter=volume \
              --enable-filter=arnndn \
              --enable-filter=afftdn \
              --enable-filter=aresample \
              --enable-runtime-cpudetect  && \
    make -j$(nproc) && \
    make install

RUN ls -al /workspace2/build/inst/lib/
RUN ls -al /workspace2/build/inst/bin/ || echo "NOERR"

